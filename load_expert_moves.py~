#!/usr/bin/env python

import numpy as np
import urllib2

from state import State

class ExpertGames:

    def __init__(self):

        pass


    def extract(self, game_str):
        lines = game_str.splitlines()
        assert lines[1][6:9] == '"5"'
        p0 = lines[4].split('"')[1]
        p1 = lines[6].split('"')[1]
        print p0, 'vs.', p1

        game_str = lines[9]
        print game_str
        turns = game_str.split(';')[1:]
        print turns

        move_action_pairs = []
        
        state = State()
        for turn in turns:
            moves = state.convert_lg_turn(turn)
            for move in moves:
                position = state.serialize()
                move_ = state.rotate_move(move)
                move_action_pairs.append((position, move_))
                
                state.board.play(move)
            
        return move_action_pairs

    def save_to_file(self, move_action_pairs):
        
        with open('data/expert_moves.dat', 'w') as f:    
            for position, move in move_action_pairs:
                f.write(''.join(map(str, position.flatten())))
                f.write(' %d %d\n' % (move[0], move[1]))

    def load_from_file(self):

        with open('data/expert_moves.dat', 'r') as f:
            for row in f.read().splitlines():
                position, move0, move1 = row.split(' ')
                position = np.array(list(position), dtype = np.uint8).reshape((10,10,2))
                move = (int(move0), int(move1))
                move_action_pairs.append((position, move))
        return move_action_pairs
                
if __name__ == "__main__":

    url = "https://www.littlegolem.net/servlet/sgf/1977341/game1977341.txt"
    response = urllib2.urlopen(url)
    txt = response.read()

    games = ExpertGames()

    move_action_pairs = games.extract(txt)
    
    games.save_to_file(move_action_pairs)
    move_action_pairs2 = games.load_from_file()
    
    for ma1, ma2 in zip(move_action_pairs, move_action_pairs2):
        assert np.array_equal(ma1[0], ma2[0])
        assert ma1[1] == ma2[1]

